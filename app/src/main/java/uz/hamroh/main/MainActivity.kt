package uz.hamroh.mainimport android.os.Bundleimport android.view.LayoutInflaterimport androidx.activity.compose.setContentimport androidx.activity.viewModelsimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.safeDrawingPaddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.material.MaterialThemeimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.unit.dpimport androidx.compose.ui.viewinterop.AndroidViewimport androidx.core.view.WindowCompatimport com.github.terrakok.cicerone.Navigatorimport com.github.terrakok.cicerone.NavigatorHolderimport dagger.hilt.android.AndroidEntryPointimport uz.hamroh.Rimport uz.hamroh.ui.base.BaseActivityimport uz.hamroh.ui.base.CustomAppNavigatorimport uz.hamroh.ui.components.CircleLoaderimport uz.hamroh.ui.theme.HamrohTheme@AndroidEntryPointclass MainActivity : BaseActivity() {    private val viewModel by viewModels<MainViewModel>()    override val navigatorHolder: NavigatorHolder by lazy { viewModel.getNavigationHolder() }    override val navigator: Navigator = object : CustomAppNavigator(this, R.id.fragment_container_view) {}    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        WindowCompat.setDecorFitsSystemWindows(window, false)        setContent {            HamrohTheme {                val state = viewModel.state.collectAsState()                MainScreen()                Box(                    modifier = Modifier                        .fillMaxSize()                        .padding(16.dp) // Optional padding if needed                ) {                    if (state.value.isLoaderVisible) {                        CircleLoader(                            color = androidx.compose.material3.MaterialTheme.colorScheme.primary,                            modifier = Modifier                                .size(100.dp)                                .align(Alignment.Center),                            isVisible = state.value.isLoaderVisible                        )                    }                }            }            if(savedInstanceState == null) viewModel.getCurrentNavigationState()            viewModel.checkIsFirstLaunch()        }    }    @Composable    fun MainScreen() {        Box(Modifier.safeDrawingPadding()){            AndroidView(factory = { context ->                LayoutInflater.from(context).inflate(R.layout.main_activity, null)            })        }    }}